#### 一 通道配置
docker exec -it cli10 bash

# 生成 channel1.block
peer channel create -o orderer.example.com:7050 -c channel1 -f ./channel-artifacts/channel1.tx --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem

# 生成 channel12.block
peer channel create -o orderer.example.com:7050 -c channel12 -f ./channel-artifacts/channel12.tx --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem

peer channel join -b channel1.block

peer channel join -b channel12.block

# 更新锚节点
peer channel update -o orderer.example.com:7050 -c channel1 -f ./channel-artifacts/Org1MSPChannel1Anchor.tx --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem

peer channel update -o orderer.example.com:7050 -c channel12 -f ./channel-artifacts/Org1MSPChannel12Anchor.tx --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem

exit

# 导出 block
docker cp cli10:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel1.block ./channel-artifacts/

docker cp cli10:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel12.block ./channel-artifacts/

## 将上面创建的channel12.block 复制到相同 channel 的 peer 中
docker cp ./channel-artifacts/channel1.block cli11:/opt/gopath/src/github.com/hyperledger/fabric/peer/ 
docker cp ./channel-artifacts/channel12.block cli11:/opt/gopath/src/github.com/hyperledger/fabric/peer/ 

docker cp ./channel-artifacts/channel12.block cli20:/opt/gopath/src/github.com/hyperledger/fabric/peer/ 

# org1 peer 1 加入channel 1 12
docker exec -it cli11 bash
peer channel join -b channel1.block
peer channel join -b channel12.block
exit
# org2 加入 channel12
docker exec -it cli20 bash

peer channel join -b channel12.block

peer channel update -o orderer.example.com:7050 -c channel12 -f ./channel-artifacts/Org2MSPChannel12Anchor.tx --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem

exit

docker exec -it cli30 bash

# 生成 channel3.block
peer channel create -o orderer.example.com:7050 -c channel3 -f ./channel-artifacts/channel3.tx --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem

peer channel join -b channel3.block

peer channel update -o orderer.example.com:7050 -c channel3 -f ./channel-artifacts/Org3MSPChannel3Anchor.tx --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem

exit

# 导出 block
docker cp cli30:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel3.block ./channel-artifacts/

#### 三 链码配置 (在 channel12 上: fabcar)
docker exec -it cli10 bash
cd /opt/gopath/src/github.com/hyperledger/fabric-cluster/chaincode/go/fabcar/
go env -w GO111MODULE=on
go env -w GOPROXY=https://goproxy.cn,direct
go mod vendor
cd /opt/gopath/src/github.com/hyperledger/fabric/peer/
## 1 打包
peer lifecycle chaincode package fabcar.tar.gz \
  --path ${GOPATH}/src/github.com/hyperledger/fabric-cluster/chaincode/go/fabcar/ \
  --label fabcar_v1

## 2 安装
peer lifecycle chaincode install fabcar.tar.gz

## 3 批准
peer lifecycle chaincode approveformyorg --channelID channel12 --name fabcar --version 1.0 --init-required --package-id fabcar_v1:11c222c505fea83f6f0c1b7d903e3af30c0615a2532ff8e0fe08d5c7fed8398d --sequence 1 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem

exit

docker cp cli10:/opt/gopath/src/github.com/hyperledger/fabric/peer/fabcar.tar.gz ../chaincode/releases/
docker cp ../chaincode/releases/fabcar.tar.gz cli11:/opt/gopath/src/github.com/hyperledger/fabric/peer/ 
docker cp ../chaincode/releases/fabcar.tar.gz cli20:/opt/gopath/src/github.com/hyperledger/fabric/peer/ 

docker exec -it cli11 bash
peer lifecycle chaincode install fabcar.tar.gz
exit

docker exec -it cli20 bash
peer lifecycle chaincode install fabcar.tar.gz

peer lifecycle chaincode approveformyorg --channelID channel12 --name fabcar --version 1.0 --init-required --package-id fabcar_v1:11c222c505fea83f6f0c1b7d903e3af30c0615a2532ff8e0fe08d5c7fed8398d --sequence 1 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem

## 查看批准情况

peer lifecycle chaincode checkcommitreadiness --channelID channel12 --name fabcar --version 1.0 --init-required --sequence 1 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem --output json

## 4 提交(在一个节点提交即可)

peer lifecycle chaincode commit -o orderer.example.com:7050 --channelID channel12 --name fabcar --version 1.0 --sequence 1 --init-required --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses peer1.org1.example.com:7061 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt 

## 5 调用
peer chaincode invoke -o orderer.example.com:7050 --isInit --ordererTLSHostnameOverride orderer.example.com --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID channel12 --name fabcar --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses peer1.org1.example.com:7061 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c '{"function":"createCar","Args":["CAR250","ZJH1","ZJH2","LUVU","Hello"]}'

exit

docker exec -it cli11 bash

# --isInit --ordererTLSHostnameOverride orderer.example.com 删掉了
peer chaincode invoke -o orderer.example.com:7050 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID channel12 --name fabcar --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses peer1.org1.example.com:7061 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c '{"function":"createCar","Args":["CAR11","Honda","Accord","Black","Tom"]}'

## 6 查询

peer chaincode query --channelID channel12 --name fabcar -c '{"Args":["queryAllCars"]}'

peer chaincode query --channelID channel12 --name fabcar -c '{"Args":["queryCar","CAR11"]}'


exit

### 链码配置（在 channel1 或 channel3 上: sacc）
docker exec -it cli10 bash
cd /opt/gopath/src/github.com/hyperledger/fabric-cluster/chaincode/go/sacc/
go env -w GO111MODULE=on
go env -w GOPROXY=https://goproxy.cn,direct
go mod vendor
cd /opt/gopath/src/github.com/hyperledger/fabric/peer/
## 1 打包
peer lifecycle chaincode package sacc.tar.gz \
  --path ${GOPATH}/src/github.com/hyperledger/fabric-cluster/chaincode/go/sacc/ \
  --lang golang \
  --label sacc_v1

## 2 安装
peer lifecycle chaincode install sacc.tar.gz

## 3 批准
peer lifecycle chaincode approveformyorg --channelID channel1 --name sacc --version 1.0 --init-required --package-id sacc_v1:f3d8509ac476f69f809b02a2a19975e12b64e061b7e60df13a4a96ccc3f1bd94 --sequence 1 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem

exit

docker cp cli10:/opt/gopath/src/github.com/hyperledger/fabric/peer/sacc.tar.gz ../chaincode/releases/
docker cp ../chaincode/releases/sacc.tar.gz cli11:/opt/gopath/src/github.com/hyperledger/fabric/peer/

docker exec -it cli11 bash
peer lifecycle chaincode install sacc.tar.gz

## 查看批准情况

peer lifecycle chaincode checkcommitreadiness --channelID channel1 --name sacc --version 1.0 --init-required --sequence 1 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem --output json

## 4 提交(在一个节点提交即可)

peer lifecycle chaincode commit -o orderer.example.com:7050 --channelID channel1 --name sacc --version 1.0 --sequence 1 --init-required --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses peer1.org1.example.com:7061 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt

## 5 调用
peer chaincode invoke -o orderer.example.com:7050 --isInit --ordererTLSHostnameOverride orderer.example.com --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID channel1 --name sacc --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses peer1.org1.example.com:7061 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt -c '{"Args":["abc", "aaa"]}'

exit

docker exec -it cli10 bash

# --isInit --ordererTLSHostnameOverride orderer.example.com 删掉了
peer chaincode invoke -o orderer.example.com:7050 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID channel1 --name sacc --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses peer1.org1.example.com:7061 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/orgs/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt -c '{"Args":["set", "abc", "bbb"]}'

## 6 查询
peer chaincode query --channelID channel1 --name sacc -c '{"Args":["query", "abc"]}'

exit
